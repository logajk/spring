package com.vector.controller;

import java.util.List;
import java.util.Map;
import java.util.Map.Entry;

import javax.servlet.http.HttpServletRequest;
import javax.xml.namespace.QName;

import org.jvnet.ws.wadl.Application;
import org.jvnet.ws.wadl.Doc;
import org.jvnet.ws.wadl.Resource;
import org.jvnet.ws.wadl.Resources;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.context.WebApplicationContext;
import org.springframework.web.method.HandlerMethod;
import org.springframework.web.servlet.mvc.method.RequestMappingInfo;
import org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping;

@Controller
@RequestMapping("/v2/application.wadl")
public class WADLControllerV2 {

	String xs_name="http://www.w3.org/2001/XMLSchema";
	@Autowired
	private RequestMappingHandlerMapping handlerMapping;
	@Autowired
	private WebApplicationContext webApplicationContext;
		
	
	@RequestMapping(method=RequestMethod.GET, produces={"application/xml"})
	@ResponseBody
	public Application generateWadl(HttpServletRequest request){
		Application result = new Application();
		Doc doc = new Doc();
		doc.setTitle("Spring REST Service WADL");
		result.getDoc().add(doc);
		Resources wadResources = new Resources();
		wadResources.setBase(getBaseUrl(request));
		
		Map<RequestMappingInfo, HandlerMethod> handlerMethods = handlerMapping.getHandlerMethods();
		for(Entry<RequestMappingInfo, HandlerMethod> entry : handlerMethods.entrySet()){
			
			HandlerMethod handlerMethod = entry.getValue();
			
			Object object = handlerMethod.getBean();
			Object bean = webApplicationContext.getBean(object.toString());
			
//			boolean isRestContoller = bean.getClass().isAnnotationPresent()
		}
		
		return null;
	}
	
	private QName convertJavaToXMLType(Class<?> type){
		QName nm = new QName("");
		String classname=type.toString();
		
		if(classname.indexOf("String") >= 0){
			nm = new QName(xs_name,"string","xs");
		}else if(classname.indexOf("Integer") >= 0){
			nm = new QName(xs_name,"int","xs");
		}
		return nm;
	}
	
	private Resource createOrFind(String uri, Resources wadResources){
		List<Resource> current = wadResources.getResource();
		for(Resource resource : current){
			if(resource.getPath().equalsIgnoreCase(uri))
				return resource;
		}
		Resource wadlResource = new Resource();
		current.add(wadlResource);
		return wadlResource;
	}
	
	private String getBaseUrl (HttpServletRequest request){
		String requestUri = request.getRequestURI();
		return request.getScheme()+"://"+request.getServerName()+":"+request.getServerPort()+requestUri;
	}
	
	private String cleanDefault(String value){
		value = value.replace("\t","");
		value = value.replace("\n","");
		return value;
	}
}
